// <auto-generated />
using System;
using Ao3RentcarsApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ao3RentcarsApi.Migrations
{
    [DbContext(typeof(RentcarsContext))]
    partial class RentcarsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Ao3RentcarsApi.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IDX_CPF_CLIENTE");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "45583420049",
                            DataAlteracao = new DateTime(2020, 11, 28, 13, 29, 8, 304, DateTimeKind.Local).AddTicks(504),
                            DataInclusao = new DateTime(2020, 11, 28, 13, 29, 8, 303, DateTimeKind.Local).AddTicks(9700),
                            Nome = "Filipe"
                        });
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Locacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataFimPrevisto")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCliente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdVeiculo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("IdVeiculo");

                    b.ToTable("Locacao");
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("IDX_LOGIN_USUARIO");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAlteracao = new DateTime(2020, 11, 28, 13, 29, 8, 301, DateTimeKind.Local).AddTicks(8920),
                            DataInclusao = new DateTime(2020, 11, 28, 13, 29, 8, 300, DateTimeKind.Local).AddTicks(2428),
                            Login = "Admin",
                            Nome = "Administrador",
                            Senha = "nxVrOLgeXbfKd0o0Qz8OUA==",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Placa")
                        .IsUnique()
                        .HasDatabaseName("IDX_PLACA_VEICULO");

                    b.ToTable("Veiculo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnoFabricacao = 2020,
                            AnoModelo = 2021,
                            DataAlteracao = new DateTime(2020, 11, 28, 13, 29, 8, 304, DateTimeKind.Local).AddTicks(6710),
                            DataInclusao = new DateTime(2020, 11, 28, 13, 29, 8, 304, DateTimeKind.Local).AddTicks(6064),
                            Marca = "VOLKSWAGEN",
                            Modelo = "Gol 1.0 Flex 12V 5p",
                            Placa = "BRA0S17"
                        },
                        new
                        {
                            Id = 2,
                            AnoFabricacao = 2020,
                            AnoModelo = 2021,
                            DataAlteracao = new DateTime(2020, 11, 28, 13, 29, 8, 304, DateTimeKind.Local).AddTicks(7350),
                            DataInclusao = new DateTime(2020, 11, 28, 13, 29, 8, 304, DateTimeKind.Local).AddTicks(7345),
                            Marca = "FIAT",
                            Modelo = "UNO DRIVE 1.0 Flex 6V 5p",
                            Placa = "BEE4R22"
                        });
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Locacao", b =>
                {
                    b.HasOne("Ao3RentcarsApi.Models.Cliente", "Cliente")
                        .WithMany("Locacoes")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ao3RentcarsApi.Models.Usuario", "Usuario")
                        .WithMany("Locacoes")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ao3RentcarsApi.Models.Veiculo", "Veiculo")
                        .WithMany("Locacoes")
                        .HasForeignKey("IdVeiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Cliente", b =>
                {
                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Usuario", b =>
                {
                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("Ao3RentcarsApi.Models.Veiculo", b =>
                {
                    b.Navigation("Locacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
